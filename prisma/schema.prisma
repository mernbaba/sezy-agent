generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agent {
  agentId                String        @id @default(uuid())
  firstName              String
  middleName             String?
  lastName               String
  email                  String        @unique
  password               String
  phone                  String?
  status                 Boolean       @default(true)
  image                  String?
  country                String
  postalAddress          String
  physicalAddress        String
  businessName           String
  businessDocument       String
  businessDocumentNumber String
  businessDocumentType   String
  nationalId             String
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  Student                Student[]
  Transaction            Transaction[]
}

model Student {
  studentId       String        @id @default(uuid())
  firstName       String
  middleName      String?
  lastName        String
  email           String        @unique
  password        String
  phone           String?
  status          Boolean       @default(true)
  image           String?
  dob             DateTime?
  gender          String?
  country         String?
  postalAddress   String?
  physicalAddress String?
  nationalId      String?
  agentId         String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Agent           Agent?        @relation(fields: [agentId], references: [agentId])
  Transaction     Transaction[]
}

model Currency {
  currencyId  String        @id @default(uuid())
  name        String?
  code        String
  forexRate   Float
  country     String?
  status      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Transaction Transaction[]
}

model Fee {
  feeId       String        @id @default(uuid())
  name        String
  info        String?
  amount      Float
  status      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Transaction Transaction[]
}

model Transaction {
  transactionId String            @id @default(uuid())
  studentId     String
  agentId       String
  currencyId    String
  feesId        String
  amount        Float
  forexRate     Float
  status        TransactionStatus @default(Successful)
  RRN           String?
  challan       String?
  a2Form        String?
  swiftCopy     String?
  remarks       String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  Student       Student           @relation(fields: [studentId], references: [studentId])
  Agent         Agent             @relation(fields: [agentId], references: [agentId])
  Currency      Currency          @relation(fields: [currencyId], references: [currencyId])
  Fee           Fee               @relation(fields: [feesId], references: [feeId])
}

enum TransactionStatus {
  Successful
  Funds_Received
  Funds_Awaited
  Incomplete
  Cancelled
  Expired
  Failed_by_Bank
  Failed_by_Sendezy
  Refund_Initiated
  Refunded
}
